#!/bin/bash

ZAP-CLI Bug Bounty Hunting Script
Usage: ./zap-cli-bug-bounty.sh <target_url> <report_file>
Check if ZAP-CLI is installed
if ! command -v zap-cli &> /dev/null
then
echo "ZAP-CLI is not installed, please install it and try again."
exit
fi

Check if the required number of arguments are passed
if [ "$#" -ne 2 ]; then
echo "Usage: $0 <target_url> <report_file>"
exit 1
fi

target_url=$1
report_file=$2

Start ZAP in daemon mode
zap-cli start --daemon

Enable passive and active scan scripts
zap-cli scripts_enable add-on "community-scripts"
zap-cli scripts_enable script "template-script"

Update the default policy to High Threshold and Insane Alert Strength
zap-cli ascan_set_policy "Default Policy" --alert-threshold High --attack-strength Insane

Set the context for scanning
zap-cli context include "$target_url.*"
zap-cli context exclude "$target_url/logout"

Spider the target
zap-cli spider $target_url

Perform an active scan
zap-cli active-scan $target_url

Perform a forced user browsing scan
zap-cli forced-user-browsing $target_url

Save the XML report
zap-cli report -o $report_file -f xml

Save the alerts to a JSON file
zap-cli alerts -l High -f json > "${report_file%.xml}.json"

Stop ZAP
zap-cli shutdown

echo "Bug Bounty Hunting with ZAP-CLI completed. Results saved to $report_file and ${report_file%.xml}.json"



